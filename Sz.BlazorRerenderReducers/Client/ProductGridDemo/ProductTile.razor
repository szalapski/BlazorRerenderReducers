@using Sz.BlazorRerenderReducers
@inherits ProfiledRerenderComponentBase

<li class="product-tile">
    <ProductImage Product="@Product" />
    <div>
        @if (!Product.IsInStock)
        {
            <OutOfStockBadge />
        }
        <ProductCode Product="@Product" />
        <ProductPriceTag Product="@Product" />
    </div>
    <div>
        <table>
            <tr>
                @foreach (var item in Product.OtherProperties)
                {
                    <th
                        class="other-property-header"
                        @onclick="() => ShowDefinition(item.Key)">@item.Key</th>
                }
            </tr>
            <tr>
                @foreach (var item in Product.OtherProperties)
                {
                    <OtherPropertyCell Item="item" @key="@(string.Join(Product.Code, item.Key))" />
                }
            </tr>
        </table>
    </div>
</li>
@code {
    [Parameter, EditorRequired]
    public ProductViewModel Product { get; set; } = null!;

    [Parameter]
    public bool AvoidUnnecessaryRerenders { get; set; } = true;

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private void ShowDefinition(string productAttributeKey)
    {
        ModalParameters parameters = new();
        parameters.Add("ProductAttributeKey", productAttributeKey);
        Modal.Show<ProductDefinition>("", parameters, new() { HideHeader = true });
    }

    // when this value is unchanged, suppresses unnecessary re-rendering
    //protected override string? GetDisplayHash() =>
    //    AvoidUnnecessaryRerenders
    //        ? $"{Product.Code};{Product.Price};{Product.IsInStock}"
    //        : base.GetDisplayHash();

}
